// <auto-generated />
using System;
using EF_Core_02;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Core_02.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Core_02.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseStudentCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseStudentStudentId")
                        .HasColumnType("int");

                    b.Property<string>("CrsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseStudentStudentId", "CourseStudentCourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EF_Core_02.Entities.CourseStudent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.HasKey("StudentId", "CourseId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("EF_Core_02.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 100L, 100);

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("DeptName");

                    b.Property<int>("EmpId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EF_Core_02.Entities.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("Varchar")
                        .HasColumnName("EmpName");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.Property<int?>("WorkForId")
                        .HasColumnType("int");

                    b.HasKey("EmpId");

                    b.HasIndex("WorkForId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EF_Core_02.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("CourseStudentCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseStudentStudentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseStudentStudentId", "CourseStudentCourseId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EF_Core_02.Entities.Course", b =>
                {
                    b.HasOne("EF_Core_02.Entities.CourseStudent", null)
                        .WithMany("Courses")
                        .HasForeignKey("CourseStudentStudentId", "CourseStudentCourseId");
                });

            modelBuilder.Entity("EF_Core_02.Entities.Department", b =>
                {
                    b.HasOne("EF_Core_02.Entities.Employee", "Manager")
                        .WithOne("DeptId")
                        .HasForeignKey("EF_Core_02.Entities.Department", "EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EF_Core_02.Entities.Employee", b =>
                {
                    b.HasOne("EF_Core_02.Entities.Department", "WorkFor")
                        .WithMany("Employees")
                        .HasForeignKey("WorkForId");

                    b.Navigation("WorkFor");
                });

            modelBuilder.Entity("EF_Core_02.Entities.Student", b =>
                {
                    b.HasOne("EF_Core_02.Entities.CourseStudent", null)
                        .WithMany("Students")
                        .HasForeignKey("CourseStudentStudentId", "CourseStudentCourseId");
                });

            modelBuilder.Entity("EF_Core_02.Entities.CourseStudent", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EF_Core_02.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EF_Core_02.Entities.Employee", b =>
                {
                    b.Navigation("DeptId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
